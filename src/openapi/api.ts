/* tslint:disable */
/* eslint-disable */
/**
 * Networkly Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AddProfileCategory200Response
 */
export interface AddProfileCategory200Response {
    /**
     * 
     * @type {string}
     * @memberof AddProfileCategory200Response
     */
    'stat_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddProfileCategory200Response
     */
    'stat_msg'?: string;
    /**
     * 
     * @type {object}
     * @memberof AddProfileCategory200Response
     */
    'pagination'?: object;
    /**
     * 
     * @type {object}
     * @memberof AddProfileCategory200Response
     */
    'data'?: object;
}
/**
 * 
 * @export
 * @interface AnswerList
 */
export interface AnswerList {
    /**
     * 
     * @type {string}
     * @memberof AnswerList
     */
    'answer'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AnswerList
     */
    'is_active'?: boolean;
}
/**
 * 
 * @export
 * @interface AttendanceAnswerReq
 */
export interface AttendanceAnswerReq {
    /**
     * 
     * @type {number}
     * @memberof AttendanceAnswerReq
     */
    'attendance_status': number;
    /**
     * 
     * @type {Array<QuestionAnswerReq>}
     * @memberof AttendanceAnswerReq
     */
    'questionnaires'?: Array<QuestionAnswerReq>;
}
/**
 * 
 * @export
 * @interface AuthPhoneReq
 */
export interface AuthPhoneReq {
    /**
     * 
     * @type {string}
     * @memberof AuthPhoneReq
     */
    'phone': string;
}
/**
 * 
 * @export
 * @interface AuthPhoneTokenReq
 */
export interface AuthPhoneTokenReq {
    /**
     * 
     * @type {string}
     * @memberof AuthPhoneTokenReq
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface AuthRegister
 */
export interface AuthRegister {
    /**
     * 
     * @type {string}
     * @memberof AuthRegister
     */
    'fname': string;
    /**
     * 
     * @type {string}
     * @memberof AuthRegister
     */
    'lname': string;
    /**
     * 
     * @type {string}
     * @memberof AuthRegister
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof AuthRegister
     */
    'phone': string;
    /**
     * 
     * @type {string}
     * @memberof AuthRegister
     */
    'utm_source'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthRegister
     */
    'utm_medium'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthRegister
     */
    'utm_campaign'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthRegister
     */
    'utm_term'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthRegister
     */
    'utm_content'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthRegister
     */
    'event_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthRegister
     */
    'provider': string;
}
/**
 * 
 * @export
 * @interface ContactResp
 */
export interface ContactResp {
    /**
     * 
     * @type {number}
     * @memberof ContactResp
     */
    'profile_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ContactResp
     */
    'fname'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactResp
     */
    'lname'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactResp
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactResp
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactResp
     */
    'created_at'?: string;
    /**
     * 
     * @type {Array<ProfileCategoryResp>}
     * @memberof ContactResp
     */
    'categories'?: Array<ProfileCategoryResp>;
}
/**
 * 
 * @export
 * @interface CreateEvent201Response
 */
export interface CreateEvent201Response {
    /**
     * 
     * @type {string}
     * @memberof CreateEvent201Response
     */
    'stat_code': string;
    /**
     * 
     * @type {string}
     * @memberof CreateEvent201Response
     */
    'stat_msg': string;
    /**
     * 
     * @type {CreateEvent201ResponseData}
     * @memberof CreateEvent201Response
     */
    'data'?: CreateEvent201ResponseData;
}
/**
 * 
 * @export
 * @interface CreateEvent201ResponseData
 */
export interface CreateEvent201ResponseData {
    /**
     * 
     * @type {string}
     * @memberof CreateEvent201ResponseData
     */
    'event_code'?: string;
}
/**
 * 
 * @export
 * @interface EditEventStatusRequest
 */
export interface EditEventStatusRequest {
    /**
     * 
     * @type {number}
     * @memberof EditEventStatusRequest
     */
    'status': number;
    /**
     * 
     * @type {string}
     * @memberof EditEventStatusRequest
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface EventAttendanceList200Response
 */
export interface EventAttendanceList200Response {
    /**
     * 
     * @type {string}
     * @memberof EventAttendanceList200Response
     */
    'stat_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventAttendanceList200Response
     */
    'stat_msg'?: string;
    /**
     * 
     * @type {Array<EventAttendanceResp>}
     * @memberof EventAttendanceList200Response
     */
    'data'?: Array<EventAttendanceResp>;
}
/**
 * 
 * @export
 * @interface EventAttendanceResp
 */
export interface EventAttendanceResp {
    /**
     * 
     * @type {number}
     * @memberof EventAttendanceResp
     */
    'profile_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof EventAttendanceResp
     */
    'fname'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventAttendanceResp
     */
    'lname'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventAttendanceResp
     */
    'phone'?: string;
    /**
     * 
     * @type {number}
     * @memberof EventAttendanceResp
     */
    'attendance_status'?: number;
    /**
     * 
     * @type {string}
     * @memberof EventAttendanceResp
     */
    'email'?: string;
    /**
     * 
     * @type {Array<ProfileCategoryResp>}
     * @memberof EventAttendanceResp
     */
    'categories'?: Array<ProfileCategoryResp>;
}
/**
 * 
 * @export
 * @interface EventInvite200Response
 */
export interface EventInvite200Response {
    /**
     * 
     * @type {string}
     * @memberof EventInvite200Response
     */
    'stat_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventInvite200Response
     */
    'stat_msg'?: string;
    /**
     * 
     * @type {object}
     * @memberof EventInvite200Response
     */
    'data'?: object;
}
/**
 * 
 * @export
 * @interface EventInviteRequest
 */
export interface EventInviteRequest {
    /**
     * 
     * @type {string}
     * @memberof EventInviteRequest
     */
    'message': string;
    /**
     * 
     * @type {Array<number>}
     * @memberof EventInviteRequest
     */
    'profile_ids'?: Array<number>;
}
/**
 * 
 * @export
 * @interface EventInvited
 */
export interface EventInvited {
    /**
     * 
     * @type {Array<ContactResp>}
     * @memberof EventInvited
     */
    'invited'?: Array<ContactResp>;
    /**
     * 
     * @type {Array<ContactResp>}
     * @memberof EventInvited
     */
    'contacts'?: Array<ContactResp>;
}
/**
 * 
 * @export
 * @interface EventReq
 */
export interface EventReq {
    /**
     * 
     * @type {string}
     * @memberof EventReq
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof EventReq
     */
    'poster_img'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventReq
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof EventReq
     */
    'location': string;
    /**
     * 
     * @type {string}
     * @memberof EventReq
     */
    'map_link'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventReq
     */
    'addr_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventReq
     */
    'addr_detail'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventReq
     */
    'addr_lng'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventReq
     */
    'addr_ltd'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventReq
     */
    'addr_note'?: string;
    /**
     * 
     * @type {number}
     * @memberof EventReq
     */
    'max_spot'?: number;
    /**
     * 
     * @type {string}
     * @memberof EventReq
     */
    'additional_msg'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventReq
     */
    'start_date': string;
    /**
     * 
     * @type {string}
     * @memberof EventReq
     */
    'end_date': string;
    /**
     * 
     * @type {string}
     * @memberof EventReq
     */
    'tz_name'?: string;
    /**
     * 
     * @type {number}
     * @memberof EventReq
     */
    'tz_offset'?: number;
    /**
     * 
     * @type {string}
     * @memberof EventReq
     */
    'background_name': string;
    /**
     * 
     * @type {string}
     * @memberof EventReq
     */
    'effect_name': string;
}
/**
 * 
 * @export
 * @interface EventResp
 */
export interface EventResp {
    /**
     * 
     * @type {string}
     * @memberof EventResp
     */
    'event_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventResp
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventResp
     */
    'creator_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventResp
     */
    'poster_img'?: string;
    /**
     * 
     * @type {number}
     * @memberof EventResp
     */
    'event_status'?: number;
    /**
     * 
     * @type {string}
     * @memberof EventResp
     */
    'start_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventResp
     */
    'end_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventResp
     */
    'tz_name'?: string;
    /**
     * 
     * @type {number}
     * @memberof EventResp
     */
    'tz_offset'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof EventResp
     */
    'is_expired'?: boolean;
}
/**
 * 
 * @export
 * @interface EventRespDetail
 */
export interface EventRespDetail {
    /**
     * 
     * @type {string}
     * @memberof EventRespDetail
     */
    'event_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventRespDetail
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventRespDetail
     */
    'poster_img'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventRespDetail
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventRespDetail
     */
    'location'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventRespDetail
     */
    'map_link'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventRespDetail
     */
    'addr_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventRespDetail
     */
    'addr_detail'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventRespDetail
     */
    'addr_lng'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventRespDetail
     */
    'addr_ltd'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventRespDetail
     */
    'addr_note'?: string;
    /**
     * 
     * @type {number}
     * @memberof EventRespDetail
     */
    'max_spot'?: number;
    /**
     * 
     * @type {string}
     * @memberof EventRespDetail
     */
    'additional_msg'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventRespDetail
     */
    'start_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventRespDetail
     */
    'end_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventRespDetail
     */
    'tz_name'?: string;
    /**
     * 
     * @type {number}
     * @memberof EventRespDetail
     */
    'tz_offset'?: number;
    /**
     * 
     * @type {Array<EventRespDetailSetHostInner>}
     * @memberof EventRespDetail
     */
    'set_host'?: Array<EventRespDetailSetHostInner>;
    /**
     * 
     * @type {EventSetRSVP}
     * @memberof EventRespDetail
     */
    'set_rsvp'?: EventSetRSVP;
    /**
     * 
     * @type {boolean}
     * @memberof EventRespDetail
     */
    'is_questionnaire_active'?: boolean;
    /**
     * 
     * @type {Array<EventSetQuestion>}
     * @memberof EventRespDetail
     */
    'set_questionnaire'?: Array<EventSetQuestion>;
    /**
     * 
     * @type {EventRespDetailSetDisplayPrivacy}
     * @memberof EventRespDetail
     */
    'set_display_privacy'?: EventRespDetailSetDisplayPrivacy;
    /**
     * 
     * @type {boolean}
     * @memberof EventRespDetail
     */
    'set_reminder'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof EventRespDetail
     */
    'creator_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventRespDetail
     */
    'background_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventRespDetail
     */
    'effect_name'?: string;
    /**
     * 
     * @type {number}
     * @memberof EventRespDetail
     */
    'event_status'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof EventRespDetail
     */
    'is_host'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof EventRespDetail
     */
    'attendance_count'?: number;
    /**
     * 
     * @type {number}
     * @memberof EventRespDetail
     */
    'attendance_status'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof EventRespDetail
     */
    'is_expired'?: boolean;
}
/**
 * 
 * @export
 * @interface EventRespDetailSetDisplayPrivacy
 */
export interface EventRespDetailSetDisplayPrivacy {
    /**
     * 
     * @type {boolean}
     * @memberof EventRespDetailSetDisplayPrivacy
     */
    'show_guest_list'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EventRespDetailSetDisplayPrivacy
     */
    'show_guest_count'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EventRespDetailSetDisplayPrivacy
     */
    'show_timestampt'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EventRespDetailSetDisplayPrivacy
     */
    'allow_guest_add_photo'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EventRespDetailSetDisplayPrivacy
     */
    'show_share_button'?: boolean;
}
/**
 * 
 * @export
 * @interface EventRespDetailSetHostInner
 */
export interface EventRespDetailSetHostInner {
    /**
     * 
     * @type {string}
     * @memberof EventRespDetailSetHostInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventRespDetailSetHostInner
     */
    'role'?: string;
}
/**
 * 
 * @export
 * @interface EventSetQuestion
 */
export interface EventSetQuestion {
    /**
     * 
     * @type {boolean}
     * @memberof EventSetQuestion
     */
    'is_default'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof EventSetQuestion
     */
    'input_type': string;
    /**
     * 
     * @type {string}
     * @memberof EventSetQuestion
     */
    'input_description': string;
    /**
     * 
     * @type {boolean}
     * @memberof EventSetQuestion
     */
    'is_required': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EventSetQuestion
     */
    'is_active': boolean;
    /**
     * 
     * @type {Array<AnswerList>}
     * @memberof EventSetQuestion
     */
    'answer_list'?: Array<AnswerList>;
}
/**
 * 
 * @export
 * @interface EventSetRSVP
 */
export interface EventSetRSVP {
    /**
     * 
     * @type {boolean}
     * @memberof EventSetRSVP
     */
    'accept_rsvp': boolean;
    /**
     * 
     * @type {number}
     * @memberof EventSetRSVP
     */
    'max_capacity': number;
}
/**
 * 
 * @export
 * @interface EventSettingReq
 */
export interface EventSettingReq {
    /**
     * 
     * @type {boolean}
     * @memberof EventSettingReq
     */
    'is_questionnaire_active': boolean;
    /**
     * 
     * @type {EventSetRSVP}
     * @memberof EventSettingReq
     */
    'rsvp'?: EventSetRSVP;
    /**
     * 
     * @type {Array<EventSetQuestion>}
     * @memberof EventSettingReq
     */
    'questionnaire'?: Array<EventSetQuestion>;
    /**
     * 
     * @type {boolean}
     * @memberof EventSettingReq
     */
    'reminder'?: boolean;
}
/**
 * 
 * @export
 * @interface GetProfile200Response
 */
export interface GetProfile200Response {
    /**
     * 
     * @type {string}
     * @memberof GetProfile200Response
     */
    'stat_code': string;
    /**
     * 
     * @type {string}
     * @memberof GetProfile200Response
     */
    'stat_msg': string;
    /**
     * 
     * @type {ProfileResp}
     * @memberof GetProfile200Response
     */
    'data'?: ProfileResp;
}
/**
 * 
 * @export
 * @interface GetProfileByID200Response
 */
export interface GetProfileByID200Response {
    /**
     * 
     * @type {string}
     * @memberof GetProfileByID200Response
     */
    'stat_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetProfileByID200Response
     */
    'stat_msg'?: string;
    /**
     * 
     * @type {ProfileResp}
     * @memberof GetProfileByID200Response
     */
    'data'?: ProfileResp;
}
/**
 * 
 * @export
 * @interface GetProviderToken200Response
 */
export interface GetProviderToken200Response {
    /**
     * 
     * @type {string}
     * @memberof GetProviderToken200Response
     */
    'stat_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetProviderToken200Response
     */
    'stat_msg'?: string;
    /**
     * 
     * @type {object}
     * @memberof GetProviderToken200Response
     */
    'pagination'?: object;
    /**
     * 
     * @type {ProviderAuthToken}
     * @memberof GetProviderToken200Response
     */
    'data'?: ProviderAuthToken;
}
/**
 * 
 * @export
 * @interface GetProviderTokenRequest
 */
export interface GetProviderTokenRequest {
    /**
     * 
     * @type {string}
     * @memberof GetProviderTokenRequest
     */
    'provider'?: GetProviderTokenRequestProviderEnum;
    /**
     * 
     * @type {string}
     * @memberof GetProviderTokenRequest
     */
    'provider_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetProviderTokenRequest
     */
    'provider_token'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetProviderTokenRequest
     */
    'fname'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetProviderTokenRequest
     */
    'lname'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetProviderTokenRequest
     */
    'provider_value': string;
}

export const GetProviderTokenRequestProviderEnum = {
    emailProv: 'email',
    gmailProv: 'gmail',
    linkedinProv: 'linkedin',
    phoneProv: 'phone'
} as const;

export type GetProviderTokenRequestProviderEnum = typeof GetProviderTokenRequestProviderEnum[keyof typeof GetProviderTokenRequestProviderEnum];

/**
 * 
 * @export
 * @interface InvitationList200Response
 */
export interface InvitationList200Response {
    /**
     * 
     * @type {string}
     * @memberof InvitationList200Response
     */
    'stat_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof InvitationList200Response
     */
    'stat_msg'?: string;
    /**
     * 
     * @type {EventInvited}
     * @memberof InvitationList200Response
     */
    'data'?: EventInvited;
}
/**
 * 
 * @export
 * @interface ListEvent200Response
 */
export interface ListEvent200Response {
    /**
     * 
     * @type {string}
     * @memberof ListEvent200Response
     */
    'stat_code': string;
    /**
     * 
     * @type {string}
     * @memberof ListEvent200Response
     */
    'stat_msg': string;
    /**
     * 
     * @type {Array<EventResp>}
     * @memberof ListEvent200Response
     */
    'data'?: Array<EventResp>;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface MyContactList200Response
 */
export interface MyContactList200Response {
    /**
     * 
     * @type {string}
     * @memberof MyContactList200Response
     */
    'stat_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof MyContactList200Response
     */
    'stat_msg'?: string;
    /**
     * 
     * @type {Array<ContactResp>}
     * @memberof MyContactList200Response
     */
    'data'?: Array<ContactResp>;
}
/**
 * 
 * @export
 * @interface NotificationPriorityResp
 */
export interface NotificationPriorityResp {
    /**
     * 
     * @type {string}
     * @memberof NotificationPriorityResp
     */
    'stat_code': string;
    /**
     * 
     * @type {string}
     * @memberof NotificationPriorityResp
     */
    'stat_msg': string;
    /**
     * 
     * @type {object}
     * @memberof NotificationPriorityResp
     */
    'pagination': object;
    /**
     * 
     * @type {NotificationPriorityRespData}
     * @memberof NotificationPriorityResp
     */
    'data': NotificationPriorityRespData;
}
/**
 * 
 * @export
 * @interface NotificationPriorityRespData
 */
export interface NotificationPriorityRespData {
    /**
     * 
     * @type {string}
     * @memberof NotificationPriorityRespData
     */
    'priority': string;
}
/**
 * 
 * @export
 * @interface Other200
 */
export interface Other200 {
    /**
     * 
     * @type {string}
     * @memberof Other200
     */
    'stat_code': string;
    /**
     * 
     * @type {string}
     * @memberof Other200
     */
    'stat_msg': string;
    /**
     * 
     * @type {object}
     * @memberof Other200
     */
    'data': object;
}
/**
 * 
 * @export
 * @interface Other401
 */
export interface Other401 {
    /**
     * 
     * @type {string}
     * @memberof Other401
     */
    'stat_code': string;
    /**
     * 
     * @type {string}
     * @memberof Other401
     */
    'stat_msg': string;
    /**
     * 
     * @type {object}
     * @memberof Other401
     */
    'data': object;
}
/**
 * 
 * @export
 * @interface PhoneAuthTokenResp
 */
export interface PhoneAuthTokenResp {
    /**
     * 
     * @type {string}
     * @memberof PhoneAuthTokenResp
     */
    'token': string;
    /**
     * 
     * @type {string}
     * @memberof PhoneAuthTokenResp
     */
    'fname'?: string;
    /**
     * 
     * @type {string}
     * @memberof PhoneAuthTokenResp
     */
    'lname'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PhoneAuthTokenResp
     */
    'is_host'?: boolean;
}
/**
 * 
 * @export
 * @interface ProfileCategoryList200Response
 */
export interface ProfileCategoryList200Response {
    /**
     * 
     * @type {string}
     * @memberof ProfileCategoryList200Response
     */
    'stat_code': string;
    /**
     * 
     * @type {string}
     * @memberof ProfileCategoryList200Response
     */
    'stat_msg': string;
    /**
     * 
     * @type {Array<ProfileCategoryResp>}
     * @memberof ProfileCategoryList200Response
     */
    'data'?: Array<ProfileCategoryResp>;
}
/**
 * 
 * @export
 * @interface ProfileCategoryReq
 */
export interface ProfileCategoryReq {
    /**
     * 
     * @type {string}
     * @memberof ProfileCategoryReq
     */
    'cat_name': string;
}
/**
 * 
 * @export
 * @interface ProfileCategoryResp
 */
export interface ProfileCategoryResp {
    /**
     * 
     * @type {number}
     * @memberof ProfileCategoryResp
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProfileCategoryResp
     */
    'cat_name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ProfileCategoryResp
     */
    'is_default'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProfileCategoryResp
     */
    'is_active'?: boolean;
}
/**
 * 
 * @export
 * @interface ProfileHistories200Response
 */
export interface ProfileHistories200Response {
    /**
     * 
     * @type {string}
     * @memberof ProfileHistories200Response
     */
    'stat_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileHistories200Response
     */
    'stat_msg'?: string;
    /**
     * 
     * @type {Array<ProfileHistory>}
     * @memberof ProfileHistories200Response
     */
    'data'?: Array<ProfileHistory>;
}
/**
 * 
 * @export
 * @interface ProfileHistory
 */
export interface ProfileHistory {
    /**
     * 
     * @type {string}
     * @memberof ProfileHistory
     */
    'event_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileHistory
     */
    'title'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProfileHistory
     */
    'attendance_status'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProfileHistory
     */
    'poster_img'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProfileHistory
     */
    'event_status'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProfileHistory
     */
    'start_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileHistory
     */
    'end_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileHistory
     */
    'tz_name'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProfileHistory
     */
    'tz_offset'?: number;
    /**
     * 
     * @type {Array<QuestionAnswerReq>}
     * @memberof ProfileHistory
     */
    'questionnaire_answers'?: Array<QuestionAnswerReq>;
}
/**
 * 
 * @export
 * @interface ProfileResp
 */
export interface ProfileResp {
    /**
     * 
     * @type {string}
     * @memberof ProfileResp
     */
    'fname': string;
    /**
     * 
     * @type {string}
     * @memberof ProfileResp
     */
    'lname': string;
    /**
     * 
     * @type {string}
     * @memberof ProfileResp
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ProfileResp
     */
    'phone'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ProfileResp
     */
    'is_host'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProfileResp
     */
    'can_login'?: boolean;
    /**
     * 
     * @type {Array<ProfileCategoryResp>}
     * @memberof ProfileResp
     */
    'categories'?: Array<ProfileCategoryResp>;
}
/**
 * 
 * @export
 * @interface ProviderAuthToken
 */
export interface ProviderAuthToken {
    /**
     * 
     * @type {string}
     * @memberof ProviderAuthToken
     */
    'token': string;
    /**
     * 
     * @type {string}
     * @memberof ProviderAuthToken
     */
    'fname'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProviderAuthToken
     */
    'lname'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ProviderAuthToken
     */
    'is_host'?: boolean;
}
/**
 * 
 * @export
 * @interface ProviderAuthValidationReq
 */
export interface ProviderAuthValidationReq {
    /**
     * 
     * @type {string}
     * @memberof ProviderAuthValidationReq
     */
    'provider'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProviderAuthValidationReq
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface QuestionAnswerReq
 */
export interface QuestionAnswerReq {
    /**
     * 
     * @type {string}
     * @memberof QuestionAnswerReq
     */
    'question': string;
    /**
     * 
     * @type {string}
     * @memberof QuestionAnswerReq
     */
    'answer': string;
}
/**
 * 
 * @export
 * @interface Register200Response
 */
export interface Register200Response {
    /**
     * 
     * @type {string}
     * @memberof Register200Response
     */
    'stat_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof Register200Response
     */
    'stat_msg'?: string;
    /**
     * 
     * @type {object}
     * @memberof Register200Response
     */
    'pagination'?: object;
    /**
     * 
     * @type {PhoneAuthTokenResp}
     * @memberof Register200Response
     */
    'data'?: PhoneAuthTokenResp;
}
/**
 * 
 * @export
 * @interface ShowEventByCode200Response
 */
export interface ShowEventByCode200Response {
    /**
     * 
     * @type {string}
     * @memberof ShowEventByCode200Response
     */
    'stat_code': string;
    /**
     * 
     * @type {string}
     * @memberof ShowEventByCode200Response
     */
    'stat_msg': string;
    /**
     * 
     * @type {EventRespDetail}
     * @memberof ShowEventByCode200Response
     */
    'data'?: EventRespDetail;
}
/**
 * 
 * @export
 * @interface TotalRegisteredResp
 */
export interface TotalRegisteredResp {
    /**
     * 
     * @type {string}
     * @memberof TotalRegisteredResp
     */
    'stat_code': string;
    /**
     * 
     * @type {string}
     * @memberof TotalRegisteredResp
     */
    'stat_msg': string;
    /**
     * 
     * @type {object}
     * @memberof TotalRegisteredResp
     */
    'pagination': object;
    /**
     * 
     * @type {TotalRegisteredRespData}
     * @memberof TotalRegisteredResp
     */
    'data': TotalRegisteredRespData;
}
/**
 * 
 * @export
 * @interface TotalRegisteredRespData
 */
export interface TotalRegisteredRespData {
    /**
     * 
     * @type {number}
     * @memberof TotalRegisteredRespData
     */
    'total': number;
}
/**
 * 
 * @export
 * @interface UploadFile200Response
 */
export interface UploadFile200Response {
    /**
     * 
     * @type {string}
     * @memberof UploadFile200Response
     */
    'stat_code': string;
    /**
     * 
     * @type {string}
     * @memberof UploadFile200Response
     */
    'stat_msg': string;
    /**
     * 
     * @type {UploadFile200ResponseData}
     * @memberof UploadFile200Response
     */
    'data'?: UploadFile200ResponseData;
}
/**
 * 
 * @export
 * @interface UploadFile200ResponseData
 */
export interface UploadFile200ResponseData {
    /**
     * 
     * @type {string}
     * @memberof UploadFile200ResponseData
     */
    'file_path'?: string;
    /**
     * 
     * @type {string}
     * @memberof UploadFile200ResponseData
     */
    'file_url'?: string;
}
/**
 * 
 * @export
 * @interface ValidateProviderToken200Response
 */
export interface ValidateProviderToken200Response {
    /**
     * 
     * @type {string}
     * @memberof ValidateProviderToken200Response
     */
    'stat_code': string;
    /**
     * 
     * @type {string}
     * @memberof ValidateProviderToken200Response
     */
    'stat_msg': string;
    /**
     * 
     * @type {object}
     * @memberof ValidateProviderToken200Response
     */
    'pagination': object;
    /**
     * 
     * @type {PhoneAuthTokenResp}
     * @memberof ValidateProviderToken200Response
     */
    'data': PhoneAuthTokenResp;
}

/**
 * AppApi - axios parameter creator
 * @export
 */
export const AppApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * get application general settings
         * @summary AppSetting
         * @param {string} [group] query string for filter by group name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppSetting: async (group?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/app/settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (group !== undefined) {
                localVarQueryParameter['group'] = group;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppApi - functional programming interface
 * @export
 */
export const AppApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppApiAxiosParamCreator(configuration)
    return {
        /**
         * get application general settings
         * @summary AppSetting
         * @param {string} [group] query string for filter by group name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAppSetting(group?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventInvite200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAppSetting(group, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AppApi - factory interface
 * @export
 */
export const AppApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppApiFp(configuration)
    return {
        /**
         * get application general settings
         * @summary AppSetting
         * @param {string} [group] query string for filter by group name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppSetting(group?: string, options?: any): AxiosPromise<EventInvite200Response> {
            return localVarFp.getAppSetting(group, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AppApi - object-oriented interface
 * @export
 * @class AppApi
 * @extends {BaseAPI}
 */
export class AppApi extends BaseAPI {
    /**
     * get application general settings
     * @summary AppSetting
     * @param {string} [group] query string for filter by group name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public getAppSetting(group?: string, options?: AxiosRequestConfig) {
        return AppApiFp(this.configuration).getAppSetting(group, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * add new profile category
         * @summary addProfileCategory
         * @param {ProfileCategoryReq} [profileCategoryReq] add new category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addProfileCategory: async (profileCategoryReq?: ProfileCategoryReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(profileCategoryReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * login or register that handle dynamic provider
         * @summary getProviderToken
         * @param {string} [act] query string for action process
         * @param {GetProviderTokenRequest} [getProviderTokenRequest] authenication for general provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProviderToken: async (act?: string, getProviderTokenRequest?: GetProviderTokenRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/auth/getprovidertoken`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (act !== undefined) {
                localVarQueryParameter['act'] = act;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getProviderTokenRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * register new user
         * @summary register
         * @param {AuthRegister} [authRegister] register new user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: async (authRegister?: AuthRegister, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authRegister, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * validateProviderToken
         * @summary validateProviderToken
         * @param {string} [xValidation] a custom header for custom token
         * @param {ProviderAuthValidationReq} [providerAuthValidationReq] validate provider token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateProviderToken: async (xValidation?: string, providerAuthValidationReq?: ProviderAuthValidationReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/auth/provider-validation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xValidation != null) {
                localVarHeaderParameter['X-Validation'] = String(xValidation);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(providerAuthValidationReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * add new profile category
         * @summary addProfileCategory
         * @param {ProfileCategoryReq} [profileCategoryReq] add new category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addProfileCategory(profileCategoryReq?: ProfileCategoryReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddProfileCategory200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addProfileCategory(profileCategoryReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * login or register that handle dynamic provider
         * @summary getProviderToken
         * @param {string} [act] query string for action process
         * @param {GetProviderTokenRequest} [getProviderTokenRequest] authenication for general provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProviderToken(act?: string, getProviderTokenRequest?: GetProviderTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetProviderToken200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProviderToken(act, getProviderTokenRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * register new user
         * @summary register
         * @param {AuthRegister} [authRegister] register new user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(authRegister?: AuthRegister, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Register200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.register(authRegister, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * validateProviderToken
         * @summary validateProviderToken
         * @param {string} [xValidation] a custom header for custom token
         * @param {ProviderAuthValidationReq} [providerAuthValidationReq] validate provider token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateProviderToken(xValidation?: string, providerAuthValidationReq?: ProviderAuthValidationReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ValidateProviderToken200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validateProviderToken(xValidation, providerAuthValidationReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * add new profile category
         * @summary addProfileCategory
         * @param {ProfileCategoryReq} [profileCategoryReq] add new category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addProfileCategory(profileCategoryReq?: ProfileCategoryReq, options?: any): AxiosPromise<AddProfileCategory200Response> {
            return localVarFp.addProfileCategory(profileCategoryReq, options).then((request) => request(axios, basePath));
        },
        /**
         * login or register that handle dynamic provider
         * @summary getProviderToken
         * @param {string} [act] query string for action process
         * @param {GetProviderTokenRequest} [getProviderTokenRequest] authenication for general provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProviderToken(act?: string, getProviderTokenRequest?: GetProviderTokenRequest, options?: any): AxiosPromise<GetProviderToken200Response> {
            return localVarFp.getProviderToken(act, getProviderTokenRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * register new user
         * @summary register
         * @param {AuthRegister} [authRegister] register new user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(authRegister?: AuthRegister, options?: any): AxiosPromise<Register200Response> {
            return localVarFp.register(authRegister, options).then((request) => request(axios, basePath));
        },
        /**
         * validateProviderToken
         * @summary validateProviderToken
         * @param {string} [xValidation] a custom header for custom token
         * @param {ProviderAuthValidationReq} [providerAuthValidationReq] validate provider token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateProviderToken(xValidation?: string, providerAuthValidationReq?: ProviderAuthValidationReq, options?: any): AxiosPromise<ValidateProviderToken200Response> {
            return localVarFp.validateProviderToken(xValidation, providerAuthValidationReq, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * add new profile category
     * @summary addProfileCategory
     * @param {ProfileCategoryReq} [profileCategoryReq] add new category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public addProfileCategory(profileCategoryReq?: ProfileCategoryReq, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).addProfileCategory(profileCategoryReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * login or register that handle dynamic provider
     * @summary getProviderToken
     * @param {string} [act] query string for action process
     * @param {GetProviderTokenRequest} [getProviderTokenRequest] authenication for general provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public getProviderToken(act?: string, getProviderTokenRequest?: GetProviderTokenRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).getProviderToken(act, getProviderTokenRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * register new user
     * @summary register
     * @param {AuthRegister} [authRegister] register new user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public register(authRegister?: AuthRegister, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).register(authRegister, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * validateProviderToken
     * @summary validateProviderToken
     * @param {string} [xValidation] a custom header for custom token
     * @param {ProviderAuthValidationReq} [providerAuthValidationReq] validate provider token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public validateProviderToken(xValidation?: string, providerAuthValidationReq?: ProviderAuthValidationReq, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).validateProviderToken(xValidation, providerAuthValidationReq, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EventsApi - axios parameter creator
 * @export
 */
export const EventsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * answer the questionaires
         * @summary answer questionnaires
         * @param {string} eventCode the code of event to retrieve
         * @param {AttendanceAnswerReq} [attendanceAnswerReq] event question answer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerQuestionnaires: async (eventCode: string, attendanceAnswerReq?: AttendanceAnswerReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventCode' is not null or undefined
            assertParamExists('answerQuestionnaires', 'eventCode', eventCode)
            const localVarPath = `/v1/events/{eventCode}/questionnaires`
                .replace(`{${"eventCode"}}`, encodeURIComponent(String(eventCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(attendanceAnswerReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * create event
         * @summary create
         * @param {EventReq} [eventReq] create event body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEvent: async (eventReq?: EventReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eventReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * edit event
         * @summary edit
         * @param {string} eventCode the code of event to retrieve
         * @param {EventReq} [eventReq] edit event body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editEvent: async (eventCode: string, eventReq?: EventReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventCode' is not null or undefined
            assertParamExists('editEvent', 'eventCode', eventCode)
            const localVarPath = `/v1/events/{eventCode}`
                .replace(`{${"eventCode"}}`, encodeURIComponent(String(eventCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eventReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * edit event setting
         * @summary edit event Setting
         * @param {string} eventCode the code of event to retrieve
         * @param {EventSettingReq} [eventSettingReq] edit event body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editEventSetting: async (eventCode: string, eventSettingReq?: EventSettingReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventCode' is not null or undefined
            assertParamExists('editEventSetting', 'eventCode', eventCode)
            const localVarPath = `/v1/events/{eventCode}/setting`
                .replace(`{${"eventCode"}}`, encodeURIComponent(String(eventCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eventSettingReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * event publish, un-publish
         * @summary event status
         * @param {string} eventCode the code of event to retrieve
         * @param {EditEventStatusRequest} [editEventStatusRequest] edit event to publish unpublish
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editEventStatus: async (eventCode: string, editEventStatusRequest?: EditEventStatusRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventCode' is not null or undefined
            assertParamExists('editEventStatus', 'eventCode', eventCode)
            const localVarPath = `/v1/events/{eventCode}/status`
                .replace(`{${"eventCode"}}`, encodeURIComponent(String(eventCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editEventStatusRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * list of event attendances
         * @summary list of attendances
         * @param {string} eventCode the code of event to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventAttendanceList: async (eventCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventCode' is not null or undefined
            assertParamExists('eventAttendanceList', 'eventCode', eventCode)
            const localVarPath = `/v1/events/{eventCode}/attendances`
                .replace(`{${"eventCode"}}`, encodeURIComponent(String(eventCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * invite contact
         * @summary Invite from contact
         * @param {string} eventCode the code of event to retrieve
         * @param {EventInviteRequest} [eventInviteRequest] invitation request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventInvite: async (eventCode: string, eventInviteRequest?: EventInviteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventCode' is not null or undefined
            assertParamExists('eventInvite', 'eventCode', eventCode)
            const localVarPath = `/v1/events/{eventCode}/invitations`
                .replace(`{${"eventCode"}}`, encodeURIComponent(String(eventCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eventInviteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List of event invitations and user contacts
         * @summary List of event invitations and user contacts
         * @param {string} eventCode the code of event to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invitationList: async (eventCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventCode' is not null or undefined
            assertParamExists('invitationList', 'eventCode', eventCode)
            const localVarPath = `/v1/events/{eventCode}/invitations`
                .replace(`{${"eventCode"}}`, encodeURIComponent(String(eventCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * list of events
         * @summary List
         * @param {number} limit how many items to return at one time (max 100)
         * @param {number} page the current page of items (for pagination)
         * @param {string} [eventTitle] filter for event title
         * @param {string} [cat] query string for filter by cat
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEvent: async (limit: number, page: number, eventTitle?: string, cat?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('listEvent', 'limit', limit)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('listEvent', 'page', page)
            const localVarPath = `/v1/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (eventTitle !== undefined) {
                localVarQueryParameter['event_title'] = eventTitle;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (cat !== undefined) {
                localVarQueryParameter['cat'] = cat;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * list of contacts of mine
         * @summary Contact List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myContactList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/me/contacts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * detail of events
         * @summary Detail
         * @param {string} eventCode the code of event to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showEventByCode: async (eventCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventCode' is not null or undefined
            assertParamExists('showEventByCode', 'eventCode', eventCode)
            const localVarPath = `/v1/events/{eventCode}`
                .replace(`{${"eventCode"}}`, encodeURIComponent(String(eventCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventsApi - functional programming interface
 * @export
 */
export const EventsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventsApiAxiosParamCreator(configuration)
    return {
        /**
         * answer the questionaires
         * @summary answer questionnaires
         * @param {string} eventCode the code of event to retrieve
         * @param {AttendanceAnswerReq} [attendanceAnswerReq] event question answer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async answerQuestionnaires(eventCode: string, attendanceAnswerReq?: AttendanceAnswerReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Other200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.answerQuestionnaires(eventCode, attendanceAnswerReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * create event
         * @summary create
         * @param {EventReq} [eventReq] create event body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEvent(eventReq?: EventReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateEvent201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEvent(eventReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * edit event
         * @summary edit
         * @param {string} eventCode the code of event to retrieve
         * @param {EventReq} [eventReq] edit event body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editEvent(eventCode: string, eventReq?: EventReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Other200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editEvent(eventCode, eventReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * edit event setting
         * @summary edit event Setting
         * @param {string} eventCode the code of event to retrieve
         * @param {EventSettingReq} [eventSettingReq] edit event body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editEventSetting(eventCode: string, eventSettingReq?: EventSettingReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Other200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editEventSetting(eventCode, eventSettingReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * event publish, un-publish
         * @summary event status
         * @param {string} eventCode the code of event to retrieve
         * @param {EditEventStatusRequest} [editEventStatusRequest] edit event to publish unpublish
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editEventStatus(eventCode: string, editEventStatusRequest?: EditEventStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Other200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editEventStatus(eventCode, editEventStatusRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * list of event attendances
         * @summary list of attendances
         * @param {string} eventCode the code of event to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventAttendanceList(eventCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventAttendanceList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventAttendanceList(eventCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * invite contact
         * @summary Invite from contact
         * @param {string} eventCode the code of event to retrieve
         * @param {EventInviteRequest} [eventInviteRequest] invitation request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventInvite(eventCode: string, eventInviteRequest?: EventInviteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventInvite200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventInvite(eventCode, eventInviteRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List of event invitations and user contacts
         * @summary List of event invitations and user contacts
         * @param {string} eventCode the code of event to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invitationList(eventCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvitationList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invitationList(eventCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * list of events
         * @summary List
         * @param {number} limit how many items to return at one time (max 100)
         * @param {number} page the current page of items (for pagination)
         * @param {string} [eventTitle] filter for event title
         * @param {string} [cat] query string for filter by cat
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEvent(limit: number, page: number, eventTitle?: string, cat?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListEvent200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEvent(limit, page, eventTitle, cat, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * list of contacts of mine
         * @summary Contact List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async myContactList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MyContactList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.myContactList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * detail of events
         * @summary Detail
         * @param {string} eventCode the code of event to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showEventByCode(eventCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShowEventByCode200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showEventByCode(eventCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EventsApi - factory interface
 * @export
 */
export const EventsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventsApiFp(configuration)
    return {
        /**
         * answer the questionaires
         * @summary answer questionnaires
         * @param {string} eventCode the code of event to retrieve
         * @param {AttendanceAnswerReq} [attendanceAnswerReq] event question answer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerQuestionnaires(eventCode: string, attendanceAnswerReq?: AttendanceAnswerReq, options?: any): AxiosPromise<Other200> {
            return localVarFp.answerQuestionnaires(eventCode, attendanceAnswerReq, options).then((request) => request(axios, basePath));
        },
        /**
         * create event
         * @summary create
         * @param {EventReq} [eventReq] create event body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEvent(eventReq?: EventReq, options?: any): AxiosPromise<CreateEvent201Response> {
            return localVarFp.createEvent(eventReq, options).then((request) => request(axios, basePath));
        },
        /**
         * edit event
         * @summary edit
         * @param {string} eventCode the code of event to retrieve
         * @param {EventReq} [eventReq] edit event body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editEvent(eventCode: string, eventReq?: EventReq, options?: any): AxiosPromise<Other200> {
            return localVarFp.editEvent(eventCode, eventReq, options).then((request) => request(axios, basePath));
        },
        /**
         * edit event setting
         * @summary edit event Setting
         * @param {string} eventCode the code of event to retrieve
         * @param {EventSettingReq} [eventSettingReq] edit event body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editEventSetting(eventCode: string, eventSettingReq?: EventSettingReq, options?: any): AxiosPromise<Other200> {
            return localVarFp.editEventSetting(eventCode, eventSettingReq, options).then((request) => request(axios, basePath));
        },
        /**
         * event publish, un-publish
         * @summary event status
         * @param {string} eventCode the code of event to retrieve
         * @param {EditEventStatusRequest} [editEventStatusRequest] edit event to publish unpublish
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editEventStatus(eventCode: string, editEventStatusRequest?: EditEventStatusRequest, options?: any): AxiosPromise<Other200> {
            return localVarFp.editEventStatus(eventCode, editEventStatusRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * list of event attendances
         * @summary list of attendances
         * @param {string} eventCode the code of event to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventAttendanceList(eventCode: string, options?: any): AxiosPromise<EventAttendanceList200Response> {
            return localVarFp.eventAttendanceList(eventCode, options).then((request) => request(axios, basePath));
        },
        /**
         * invite contact
         * @summary Invite from contact
         * @param {string} eventCode the code of event to retrieve
         * @param {EventInviteRequest} [eventInviteRequest] invitation request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventInvite(eventCode: string, eventInviteRequest?: EventInviteRequest, options?: any): AxiosPromise<EventInvite200Response> {
            return localVarFp.eventInvite(eventCode, eventInviteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * List of event invitations and user contacts
         * @summary List of event invitations and user contacts
         * @param {string} eventCode the code of event to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invitationList(eventCode: string, options?: any): AxiosPromise<InvitationList200Response> {
            return localVarFp.invitationList(eventCode, options).then((request) => request(axios, basePath));
        },
        /**
         * list of events
         * @summary List
         * @param {number} limit how many items to return at one time (max 100)
         * @param {number} page the current page of items (for pagination)
         * @param {string} [eventTitle] filter for event title
         * @param {string} [cat] query string for filter by cat
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEvent(limit: number, page: number, eventTitle?: string, cat?: string, options?: any): AxiosPromise<ListEvent200Response> {
            return localVarFp.listEvent(limit, page, eventTitle, cat, options).then((request) => request(axios, basePath));
        },
        /**
         * list of contacts of mine
         * @summary Contact List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myContactList(options?: any): AxiosPromise<MyContactList200Response> {
            return localVarFp.myContactList(options).then((request) => request(axios, basePath));
        },
        /**
         * detail of events
         * @summary Detail
         * @param {string} eventCode the code of event to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showEventByCode(eventCode: string, options?: any): AxiosPromise<ShowEventByCode200Response> {
            return localVarFp.showEventByCode(eventCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventsApi - object-oriented interface
 * @export
 * @class EventsApi
 * @extends {BaseAPI}
 */
export class EventsApi extends BaseAPI {
    /**
     * answer the questionaires
     * @summary answer questionnaires
     * @param {string} eventCode the code of event to retrieve
     * @param {AttendanceAnswerReq} [attendanceAnswerReq] event question answer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public answerQuestionnaires(eventCode: string, attendanceAnswerReq?: AttendanceAnswerReq, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).answerQuestionnaires(eventCode, attendanceAnswerReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * create event
     * @summary create
     * @param {EventReq} [eventReq] create event body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public createEvent(eventReq?: EventReq, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).createEvent(eventReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * edit event
     * @summary edit
     * @param {string} eventCode the code of event to retrieve
     * @param {EventReq} [eventReq] edit event body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public editEvent(eventCode: string, eventReq?: EventReq, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).editEvent(eventCode, eventReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * edit event setting
     * @summary edit event Setting
     * @param {string} eventCode the code of event to retrieve
     * @param {EventSettingReq} [eventSettingReq] edit event body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public editEventSetting(eventCode: string, eventSettingReq?: EventSettingReq, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).editEventSetting(eventCode, eventSettingReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * event publish, un-publish
     * @summary event status
     * @param {string} eventCode the code of event to retrieve
     * @param {EditEventStatusRequest} [editEventStatusRequest] edit event to publish unpublish
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public editEventStatus(eventCode: string, editEventStatusRequest?: EditEventStatusRequest, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).editEventStatus(eventCode, editEventStatusRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * list of event attendances
     * @summary list of attendances
     * @param {string} eventCode the code of event to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public eventAttendanceList(eventCode: string, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).eventAttendanceList(eventCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * invite contact
     * @summary Invite from contact
     * @param {string} eventCode the code of event to retrieve
     * @param {EventInviteRequest} [eventInviteRequest] invitation request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public eventInvite(eventCode: string, eventInviteRequest?: EventInviteRequest, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).eventInvite(eventCode, eventInviteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List of event invitations and user contacts
     * @summary List of event invitations and user contacts
     * @param {string} eventCode the code of event to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public invitationList(eventCode: string, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).invitationList(eventCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * list of events
     * @summary List
     * @param {number} limit how many items to return at one time (max 100)
     * @param {number} page the current page of items (for pagination)
     * @param {string} [eventTitle] filter for event title
     * @param {string} [cat] query string for filter by cat
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public listEvent(limit: number, page: number, eventTitle?: string, cat?: string, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).listEvent(limit, page, eventTitle, cat, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * list of contacts of mine
     * @summary Contact List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public myContactList(options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).myContactList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * detail of events
     * @summary Detail
     * @param {string} eventCode the code of event to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public showEventByCode(eventCode: string, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).showEventByCode(eventCode, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NotificationApi - axios parameter creator
 * @export
 */
export const NotificationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * provide priority provider to send notification (email/phone)
         * @summary notification priority
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        noficationPriority: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/app/notification/priority`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationApi - functional programming interface
 * @export
 */
export const NotificationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificationApiAxiosParamCreator(configuration)
    return {
        /**
         * provide priority provider to send notification (email/phone)
         * @summary notification priority
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async noficationPriority(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificationPriorityResp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.noficationPriority(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NotificationApi - factory interface
 * @export
 */
export const NotificationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificationApiFp(configuration)
    return {
        /**
         * provide priority provider to send notification (email/phone)
         * @summary notification priority
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        noficationPriority(options?: any): AxiosPromise<NotificationPriorityResp> {
            return localVarFp.noficationPriority(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotificationApi - object-oriented interface
 * @export
 * @class NotificationApi
 * @extends {BaseAPI}
 */
export class NotificationApi extends BaseAPI {
    /**
     * provide priority provider to send notification (email/phone)
     * @summary notification priority
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public noficationPriority(options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).noficationPriority(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProfileApi - axios parameter creator
 * @export
 */
export const ProfileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * get profile by JWT token
         * @summary get profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get profile by ID
         * @summary get profile by ID
         * @param {number} intID the id of rosources data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfileByID: async (intID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'intID' is not null or undefined
            assertParamExists('getProfileByID', 'intID', intID)
            const localVarPath = `/v1/profiles/{intID}`
                .replace(`{${"intID"}}`, encodeURIComponent(String(intID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * detail of profile histories
         * @summary profile histories
         * @param {number} intID the id of rosources data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileHistories: async (intID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'intID' is not null or undefined
            assertParamExists('profileHistories', 'intID', intID)
            const localVarPath = `/v1/profiles/{intID}/histories`
                .replace(`{${"intID"}}`, encodeURIComponent(String(intID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get total user that has been registered
         * @summary totalRegistered
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showTotalRegistered: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/auth/register/total`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfileApi - functional programming interface
 * @export
 */
export const ProfileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProfileApiAxiosParamCreator(configuration)
    return {
        /**
         * get profile by JWT token
         * @summary get profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfile(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetProfile200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProfile(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * get profile by ID
         * @summary get profile by ID
         * @param {number} intID the id of rosources data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfileByID(intID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetProfileByID200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProfileByID(intID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * detail of profile histories
         * @summary profile histories
         * @param {number} intID the id of rosources data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async profileHistories(intID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileHistories200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.profileHistories(intID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * get total user that has been registered
         * @summary totalRegistered
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showTotalRegistered(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TotalRegisteredResp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showTotalRegistered(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProfileApi - factory interface
 * @export
 */
export const ProfileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProfileApiFp(configuration)
    return {
        /**
         * get profile by JWT token
         * @summary get profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile(options?: any): AxiosPromise<GetProfile200Response> {
            return localVarFp.getProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * get profile by ID
         * @summary get profile by ID
         * @param {number} intID the id of rosources data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfileByID(intID: number, options?: any): AxiosPromise<GetProfileByID200Response> {
            return localVarFp.getProfileByID(intID, options).then((request) => request(axios, basePath));
        },
        /**
         * detail of profile histories
         * @summary profile histories
         * @param {number} intID the id of rosources data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileHistories(intID: number, options?: any): AxiosPromise<ProfileHistories200Response> {
            return localVarFp.profileHistories(intID, options).then((request) => request(axios, basePath));
        },
        /**
         * get total user that has been registered
         * @summary totalRegistered
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showTotalRegistered(options?: any): AxiosPromise<TotalRegisteredResp> {
            return localVarFp.showTotalRegistered(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProfileApi - object-oriented interface
 * @export
 * @class ProfileApi
 * @extends {BaseAPI}
 */
export class ProfileApi extends BaseAPI {
    /**
     * get profile by JWT token
     * @summary get profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public getProfile(options?: AxiosRequestConfig) {
        return ProfileApiFp(this.configuration).getProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get profile by ID
     * @summary get profile by ID
     * @param {number} intID the id of rosources data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public getProfileByID(intID: number, options?: AxiosRequestConfig) {
        return ProfileApiFp(this.configuration).getProfileByID(intID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * detail of profile histories
     * @summary profile histories
     * @param {number} intID the id of rosources data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public profileHistories(intID: number, options?: AxiosRequestConfig) {
        return ProfileApiFp(this.configuration).profileHistories(intID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get total user that has been registered
     * @summary totalRegistered
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public showTotalRegistered(options?: AxiosRequestConfig) {
        return ProfileApiFp(this.configuration).showTotalRegistered(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProfileCategoryApi - axios parameter creator
 * @export
 */
export const ProfileCategoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * list of profile categories
         * @summary profileCategoryList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileCategoryList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfileCategoryApi - functional programming interface
 * @export
 */
export const ProfileCategoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProfileCategoryApiAxiosParamCreator(configuration)
    return {
        /**
         * list of profile categories
         * @summary profileCategoryList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async profileCategoryList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileCategoryList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.profileCategoryList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProfileCategoryApi - factory interface
 * @export
 */
export const ProfileCategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProfileCategoryApiFp(configuration)
    return {
        /**
         * list of profile categories
         * @summary profileCategoryList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileCategoryList(options?: any): AxiosPromise<ProfileCategoryList200Response> {
            return localVarFp.profileCategoryList(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProfileCategoryApi - object-oriented interface
 * @export
 * @class ProfileCategoryApi
 * @extends {BaseAPI}
 */
export class ProfileCategoryApi extends BaseAPI {
    /**
     * list of profile categories
     * @summary profileCategoryList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileCategoryApi
     */
    public profileCategoryList(options?: AxiosRequestConfig) {
        return ProfileCategoryApiFp(this.configuration).profileCategoryList(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UploadApi - axios parameter creator
 * @export
 */
export const UploadApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * upload file
         * @summary upload
         * @param {File} [imgFile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile: async (imgFile?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/file/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (imgFile !== undefined) { 
                localVarFormParams.append('img_file', imgFile as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UploadApi - functional programming interface
 * @export
 */
export const UploadApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UploadApiAxiosParamCreator(configuration)
    return {
        /**
         * upload file
         * @summary upload
         * @param {File} [imgFile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadFile(imgFile?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadFile200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFile(imgFile, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UploadApi - factory interface
 * @export
 */
export const UploadApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UploadApiFp(configuration)
    return {
        /**
         * upload file
         * @summary upload
         * @param {File} [imgFile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile(imgFile?: File, options?: any): AxiosPromise<UploadFile200Response> {
            return localVarFp.uploadFile(imgFile, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UploadApi - object-oriented interface
 * @export
 * @class UploadApi
 * @extends {BaseAPI}
 */
export class UploadApi extends BaseAPI {
    /**
     * upload file
     * @summary upload
     * @param {File} [imgFile] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public uploadFile(imgFile?: File, options?: AxiosRequestConfig) {
        return UploadApiFp(this.configuration).uploadFile(imgFile, options).then((request) => request(this.axios, this.basePath));
    }
}


